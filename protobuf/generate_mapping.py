import os
import re
import glob
import argparse

PROTOC_PATH = ''  # 替换为protoc的实际路径
PROTOC_TS_PLUGIN_PATH = ''  # 替换为protoc-gen-ts的实际路径
PROTO_FILES_PATH = ''  # 替换为你的.proto文件路径
MESSAGE_IDS_FILE_TS = ''
MESSAGE_IDS_FILE_JAVA = ''
def extract_message_ids(proto_files):
    message_ids = {}
    for proto_file in proto_files:
        with open(proto_file, 'r') as f:
            content = f.read()

        message_pattern = re.compile(r'^message (\w+) {', re.MULTILINE)
        message_matches = message_pattern.finditer(content)
        for message_match in message_matches:
            message_name = message_match.group(1)
            message_ids[message_name] = len(message_ids) + 1  # 自动为每个消息生成唯一的ID
    
    for id, message_name in message_ids.items():
        print("生成消息ID：", id, "->", message_name)

    return message_ids

def write_mapping_to_ts(message_ids, proto_files):
    ts_content = f'// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n // generated by generate_mapping.py\n\n'
    ts_content += f'// dont modify this file\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n'

    # 添加导入语句
    for proto_file in proto_files:
        with open(proto_file, 'r') as f:
            content = f.read()
        class_pattern = re.compile(r'^message (\w+) {', re.MULTILINE)
        class_matches = class_pattern.finditer(content)
        for class_match in class_matches:
            class_name = class_match.group(1)
            ts_content += f'import {{ {class_name} }} from "./message/proto/{os.path.splitext(os.path.basename(proto_file))[0]}";\n'
    ts_content += '\n'

    ts_content += f'export const messageMappings = {{\n'
    for id, message_name in message_ids.items():
        ts_content += f'    {message_name}: {id},\n'
    ts_content += '};\n\n'

    with open(MESSAGE_IDS_FILE_TS, 'w', encoding='utf-8') as output_file:
        output_file.write(ts_content)

    print("已生成TypeScript消息ID映射：", MESSAGE_IDS_FILE_TS)

def write_mapping_to_java(message_ids):
    java_content = 'package com.example.message;\n\n'

    java_content += 'import java.util.HashMap;\n'
    java_content += 'import java.util.Map;\n\n'

    java_content += 'public enum MessageIds {\n'
    for id, message_name in message_ids.items():
        java_content += f'    {message_name}({id}),\n'
    java_content += '    UNKNOWN(-1);\n\n'

    java_content += '    private int id;\n'
    java_content += '    private static final Map<Integer, MessageIds> idToEnumMap = new HashMap<>();\n\n'
    java_content += '    static {\n'
    for id, message_name in message_ids.items():
        java_content += f'        idToEnumMap.put({id}, {message_name});\n'
    java_content += '    }\n\n'

    java_content += '    private MessageIds(int id) {\n'
    java_content += '        this.id = id;\n'
    java_content += '    }\n\n'
    java_content += '    public int getId() {\n'
    java_content += '        return id;\n'
    java_content += '    }\n\n'
    java_content += '    public static MessageIds fromId(int id) {\n'
    java_content += '        return idToEnumMap.getOrDefault(id, UNKNOWN);\n'
    java_content += '    }\n\n'
    java_content += '}\n'

    with open(MESSAGE_IDS_FILE_JAVA, 'w', encoding='utf-8') as output_file:
        output_file.write(java_content)

    print("已生成Java消息ID映射：", MESSAGE_IDS_FILE_JAVA)

def main():
    parser = argparse.ArgumentParser(description='Generate TypeScript and Java message ID mappings.')
    parser.add_argument('--protoc_path', required=True, help='Path to the protoc executable')
    parser.add_argument('--protoc_ts_plugin_path', required=True, help='Path to the protoc-gen-ts plugin')
    parser.add_argument('--proto_files_path', required=True, help='Glob pattern for .proto files')
    parser.add_argument('--message_ids_file_ts', default='MessageIds.ts', help='Name of the TypeScript message IDs file (default: MessageIds.ts)')
    parser.add_argument('--message_ids_file_java', default='MessageIds.java', help='Name of the Java message IDs file (default: MessageIds.java)')

    args = parser.parse_args()

    global PROTOC_PATH
    global PROTOC_TS_PLUGIN_PATH
    global PROTO_FILES_PATH
    global MESSAGE_IDS_FILE_TS
    global MESSAGE_IDS_FILE_JAVA

    PROTOC_PATH = args.protoc_path
    PROTOC_TS_PLUGIN_PATH = args.protoc_ts_plugin_path
    PROTO_FILES_PATH = args.proto_files_path
    MESSAGE_IDS_FILE_TS = args.message_ids_file_ts
    MESSAGE_IDS_FILE_JAVA = args.message_ids_file_java

    proto_files = glob.glob(PROTO_FILES_PATH, recursive=True)
    message_ids = extract_message_ids(proto_files)
    write_mapping_to_ts(message_ids, proto_files)
    write_mapping_to_java(message_ids)


if __name__ == '__main__':
    main()